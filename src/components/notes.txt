show alert how to use---------------------------------------------------------------------------
  // const [alertMessage, setAlertMessage] = useState("");
  // const [showAlert, setShowAlert] = useState(false);
  // const [selectedId, setSelectedId] = useState(null);
  // const handleShowAlert = (message) => {
  // setAlertMessage(message);
  //   setShowAlert(true);
  // };
  // const handleCloseAlert = (status) => {
  //   if (status === 1) {
  //     const filteredPosition = position.filter((_, index) => index !== indexToRemove);
  //     setPosition(filteredPosition);
  //     localStorage.setItem("employmentHistory", JSON.stringify(filteredPosition));
  //   }
  //   setShowAlert(false);
  // };
  // const handleRemoveList = (dutyId) => {
  //   setSelectedId(dutyId);
  //   handleShowAlert("This action cannot be undone. It will permanently delete the item and remove it from your list");
  // };
  // <ShowAlert open={showAlert} onHide={handleCloseAlert} message={alertMessage} />
show alert how to use---------------------------------------------------------------------------




data table how to use---------------------------------------------------------------------------
import React from 'react';
import DataTable from '@/app/my_components/DataTable';

const ExamplePage = () => {
  // Sample data
  const data = [
    { id: 1, name: 'John Doe', age: 30, email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', age: 25, email: 'jane@example.com' },
    { id: 3, name: 'Bob Johnson', age: 35, email: 'bob@example.com' },
    // ... add more data objects as needed
  ];

  // Define columns
  const columns = [
    { header: 'ID', accessor: 'id', sortable: true },
    { header: 'Name', accessor: 'name', className: (row) => row.fullName === "Kobid" ? "bg-red-500" : "" },
    { header: 'Age', accessor: 'age', headerClassName: "text-red-500" },
    { header: 'Email', accessor: 'email', hiddenOnMobile: true},
    { 
      header: 'Actions', 
      cell: (row) => (
        <button onClick={() => alert(`Edit user ${row.name}`)}>
          Edit
        </button>
      )
    },
  ];

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">User Data</h1>
      <DataTable columns={columns} data={data} itemsPerPage={5} />
    </div>
  );
};

// mga parameters kung kailangan nimo eh add (optionals)
const DataTable = ({
  columns,
  data,
  itemsPerPage = 10,
  autoIndex = false,
  title,
  add,
  hideSearch = false,
  onRowClick,
  idAccessor,
  headerAction,
  tableCaption,
  isSelectable = false,
  selectedData,
  limitNumberWords
}) => 

export default ExamplePage;

data table how to use---------------------------------------------------------------------------




combo-box how to use---------------------------------------------------------------------------


if (res.data !== 0) {
    const formattedData = res.data.map((item) => ({
      value: item.user_id,
      label: item.user_fullname,
    }));
}


 <FormField
    name="skill"
    control={form.control}
    render={({ field }) => (
      <FormItem>
        <FormLabel>Skill</FormLabel>
        <div>
          <ComboBox
            list={skill}
            subject="skill"
            value={field.value}
            onChange={field.onChange}
            styles={"bg-background"}
          />
        </div>
        <FormMessage />
      </FormItem>
    )}
  />

combo-box how to use---------------------------------------------------------------------------



number only form---------------------------------------------------------------------------


points: z
  .string()
  .min(1, {
    message: "This field is required",
  })
  .refine((value) => !isNaN(Number(value)), {
    message: "Points must be a number",
  }),


number only form---------------------------------------------------------------------------

date form---------------------------------------------------------------------------

  <FormField
    control={form.control}
    name="date"
    render={({ field }) => (
      <FormItem>
        <DatePicker
          form={form}
          name={field.name}
          label="Pick a date for interview"
          pastAllowed={true}
          futureAllowed={false}
        />
      </FormItem>
    )}
  />

date form---------------------------------------------------------------------------



datePicker--------------------------------------------------------------------------

const [data, setData] = useState([])
  const [filteredData, setFilteredData] = useState([])
  const [dateRange, setDateRange] = useState({
    from: new Date(new Date().getFullYear(), new Date().getMonth(), 1),
    to: new Date(),
  });
  useEffect(() => {
    filterData(data, dateRange.from, dateRange.to);
  }, [dateRange, data]);

  const filterData = (data, from, to) => {
    if (!data.length) return;

    const filtered = data.filter(job => {
      const jobDate = new Date(job.jobM_createdAt);
      return jobDate >= from && jobDate <= to;
    });

    setFilteredData(filtered);
  };

  const handleDateUpdate = (values) => {
    setDateRange({
      from: values.range.from,
      to: values.range.to,
    });
  };



  // filteredData gamiton pang display (filteredData.map)
  // careful ani( const jobDate = new Date(job.jobM_createdAt); ) eh ctrl + f na dapat eh change ang jobM_createdAt
  // base sa imong column name dapat nga date
 
   <div className='justify-self-end'>
    <DateRangePicker
      onUpdate={handleDateUpdate}
      initialDateFrom={dateRange.from}
      initialDateTo={dateRange.to}
      align="start"
      locale="en-GB"
      showCompare={false}
    />
  </div>

datePicker--------------------------------------------------------------------------
